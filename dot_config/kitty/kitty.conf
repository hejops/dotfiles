# vim:fileencoding=utf-8:ft=conf:foldmethod=marker
# https://sw.kovidgoyal.net/kitty/conf.html
# the default config is not on github, but this is close:
# https://github.com/kovidgoyal/kitty/blob/master/kitty/config_data.py

# hot take: ligatures defeat the purpose of a monospace font (e.g. ==)
disable_ligatures always
font_family Haskplex
font_features none
font_size 10

# fade, separator, powerline, or hidden
tab_bar_style separator

# active_tab_title_template "[{index}]"
# tab_title_template "[{index}] {title}"
active_tab_title_template "[{index}] {title}"
tab_activity_symbol !
tab_separator " | "
tab_title_template "{index}"

kitty_mod ctrl+shift

# ctrl+i/o reserved for vim
map ctrl+equal change_font_size all 0
map ctrl+minus change_font_size all -2.0
map kitty_mod+, move_tab_backward
map kitty_mod+. move_tab_forward
map kitty_mod+d detach_tab # moves the tab into a new OS window
map kitty_mod+equal change_font_size all +2.0
map kitty_mod+h previous_tab
map kitty_mod+j scroll_page_down
map kitty_mod+k scroll_page_up
map kitty_mod+l next_tab
map kitty_mod+s show_scrollback
map kitty_mod+t new_tab

# https://github.com/kovidgoyal/kitty/blob/0ca94f8a8882d174b847bd23254f057c62685954/kitty/launch.py#L37
map kitty_mod+o launch --stdin-source=@screen_scrollback --type=tab bash ~/scripts/pytrace

# Select a path/filename and insert it into the terminal. Useful, for
# instance to run git commands on a filename output from a previous
# git command.
map kitty_mod+f kitten hints --type path --program -

# consider moving inputrc bindings here, if possible
# map ctrl+x send_text all \x1bxi
map ctrl+[ send_text all \x1bI
map ctrl+] send_text all \x1bA

# # essential for bypassing the arbitrary remappings of 60% keyboards
# # 1. single-key remaps are best done as keyboard macros
# # 2. i now find esc and backspace too far
# map alt+backspace send_text all ~
# map alt+esc send_text all `

# closest to default ctrl-l
# ctrl+x conflicts with vim decrement
map alt+l combine : clear_terminal scroll active : send_text normal,application \x0c
map ctrl+z combine : clear_terminal scroll active : send_text normal,application \x0c

# Fonts {{{

# kitty is picky about what fonts are allowed. to see what is allowed:
# fc-list : family spacing | grep spacing
# fc-list : family spacing | grep spacing | grep -Po '^[^:,]+' | sort -u
# https://github.com/kovidgoyal/kitty/issues/557#issuecomment-390542550
# not sure what font is used as fallback, Noto?

# https://github.com/dse/monospace-font-list/blob/master/monospace-font-list.md
# c https://github.com/dse/monospace-font-list/raw/master/monospace-font-list.md | grep -Po 'https://github.com/[^/]+/[^ /]+' | sort -u

# echo 'gr' 'p=' 'em' '{}' 'g=' 'ff'

# the best kinds of fonts:
# - have no italics (even if you disable them in kitty, some fallback may be loaded)
# - have no ligatures
# - have good character separation
# - are generally unassuming and not out to dazzle you

# fira and haskplex are the most reliable ones in this regard; choosing between
# the two comes down to whether i want a narrow/wide font at any given time (i
# usually go wide). mononoki and jetbrains are solid runner-ups to the narrow
# fira, but have some downsides (e.g. i really dislike mononoki's comically
# semi-circular parentheses, and Uiua386 doesn't handle diacritics well). noto
# is borderline chonky, but it is more than acceptable, especially for a
# "default" font.

# font_family Fira Mono
# font_family FiraMono Nerd Font
# font_family JetBrains Mono
# font_family Noto Color Emoji
# font_family mononoki
# font_family Uiua386

# chonky -- chars tend to touch each other, hurting readability; some, worse still, get cut off, which is unacceptable
# font_family Cascadia Code
# font_family Cascadia Code PL
# font_family Cascadia Mono
# font_family Cascadia Mono PL
# font_family IBM Plex Mono
# font_family Inconsolata
# font_family Intel One Mono
# font_family Liberation Mono
# font_family Liga SFMono Nerd Font
# font_family Martian Mono
# font_family SF Mono
# font_family Source Code Pro
# font_family SourceCodeVF

# courier new -- too round, freemono is horrendously thin
# font_family FreeMono
# font_family Nimbus Mono PS
# font_family DSE Typewriter

# too small
# font_family Fantasque Sans Mono

# too narrow
# font_family Iosevka
# font_family Iosevka Fixed
# font_family Iosevka Term

# w i d e
# font_family Noto Sans SignWriting

# borked -- just uses fallback
# font_family Terminus
# font_family xos4 Terminus

adjust_column_width -1
adjust_line_height  0
bold_font        auto
bold_italic_font auto
force_ltr no
italic_font      auto

# symbol_map U+E0A0-U+E0A3,U+E0C0-U+E0C7 PowerlineSymbols
#     symbol_map codepoints Font Family Name

# disable programming / general ligatures

#     map alt+1 disable_ligatures_in active always
#     map alt+2 disable_ligatures_in all never
#     map alt+3 disable_ligatures_in tab cursor

# On Linux, these are read from the FontConfig database first and
# then this, setting is applied, so they can be configured in a
# single, central place.

# To get the PostScript name for a font, use kitty + list-fonts
# --psnames:

# .. code-block:: sh

#     $ kitty + list-fonts --psnames | grep Fira
#     Fira Code
#     Fira Code Bold (FiraCode-Bold)
#     Fira Code Light (FiraCode-Light)
#     Fira Code Medium (FiraCode-Medium)
#     Fira Code Regular (FiraCode-Regular)
#     Fira Code Retina (FiraCode-Retina)

# The part in brackets is the PostScript name.

# Enable alternate zero and oldstyle numerals:
#     font_features FiraCode-Retina +zero +onum

# Enable only alternate zero:
#     font_features FiraCode-Retina +zero

# Disable the normal ligatures, but keep the calt feature which (in
# this font) breaks up monotony:
#     font_features TT2020StyleB-Regular -liga +calt

# In conjunction with force_ltr, you may want to disable Arabic
# shaping entirely, and only look at their isolated forms if they
# show up in a document. You can do this with e.g.:
#     font_features UnifontMedium +isol -medi -fina -init

box_drawing_scale 0.001, 1, 1.5, 2

# Change the sizes of the lines used for the box drawing unicode
# characters These values are in pts. They will be scaled by the
# monitor DPI to arrive at a pixel value. There must be four values
# corresponding to thin, normal, thick, and very thick lines.

# }}}

# Cursor, mouse {{{

mouse_map left click ungrabbed mouse_handle_click selection link prompt

# First check for a selection and if one exists do nothing. Then check for a
# link under the mouse cursor and if one exists, click it. Finally check if the
# click happened at the current shell prompt and if so, move the cursor to the
# click location. Note that this requires shell integration to work.

cursor #cccccc
cursor_text_color #111111

# Choose the color of text under the cursor. If you want it rendered with the
# background color of the cell underneath instead, use the special keyword:
# background

cursor_shape block

# (block, beam, underline)

cursor_beam_thickness 1.5
cursor_underline_thickness 2.0
cursor_blink_interval 0
cursor_stop_blinking_after 15.0

mouse_hide_wait 0.0

# Hide mouse cursor after the specified number of seconds of the
# mouse not being used. Set to zero to disable mouse cursor hiding.
# Set to a negative value to hide the mouse cursor immediately when
# typing text. Disabled by default on macOS as getting it to work
# robustly with the ever-changing sea of bugs that is Cocoa is too
# much effort.

copy_on_select no

# Copy to clipboard or a private buffer on select. With this set to
# clipboard, simply selecting text with the mouse will cause the text
# to be copied to clipboard. Useful on platforms such as macOS that
# do not have the concept of primary selections. You can instead
# specify a name such as a1 to copy to a private kitty buffer
# instead. Map a shortcut with the paste_from_buffer action to paste
# from this private buffer. For example:

#     map cmd+shift+v paste_from_buffer a1

# Note that copying to the clipboard is a security risk, as all
# programs, including websites open in your browser can read the
# contents of the system clipboard.

wheel_scroll_multiplier 5.0

# Modify the amount scrolled by the mouse wheel. Note this is only
# used for low precision scrolling devices, not for high precision
# scrolling on platforms such as macOS and Wayland. Use negative
# numbers to change scroll direction.

touch_scroll_multiplier 1.0

# Modify the amount scrolled by a touchpad. Note this is only used
# for high precision scrolling devices on platforms such as macOS and
# Wayland. Use negative numbers to change scroll direction.

click_interval -1.0

# The interval between successive clicks to detect double/triple
# clicks (in seconds). Negative numbers will use the system default
# instead, if available, or fallback to 0.5.

focus_follows_mouse no

# Set the active window to the window under the mouse when moving the
# mouse around

pointer_shape_when_grabbed arrow

# The shape of the mouse pointer when the program running in the
# terminal grabs the mouse. Valid values are: arrow, beam and hand

default_pointer_shape beam

# The default shape of the mouse pointer. Valid values are: arrow,
# beam and hand

pointer_shape_when_dragging beam

# The default shape of the mouse pointer when dragging across text.
# Valid values are: arrow, beam and hand

# }}}

# Scrollback {{{

scrollback_lines 2000

# Number of lines of history to keep in memory for scrolling back.
# Memory is allocated on demand. Negative numbers are (effectively)
# infinite scrollback. Note that using very large scrollback is not
# recommended as it can slow down performance of the terminal and
# also use large amounts of RAM. Instead, consider using
# scrollback_pager_history_size.

scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

# Program with which to view scrollback in a new window. The
# scrollback buffer is passed as STDIN to this program. If you change
# it, make sure the program you use can handle ANSI escape sequences
# for colors and text formatting. INPUT_LINE_NUMBER in the command
# line above will be replaced by an integer representing which line
# should be at the top of the screen. Similarly CURSOR_LINE and
# CURSOR_COLUMN will be replaced by the current cursor position.

scrollback_pager_history_size 0

# Separate scrollback history size, used only for browsing the
# scrollback buffer (in MB). This separate buffer is not available
# for interactive scrolling but will be piped to the pager program
# when viewing scrollback buffer in a separate window. The current
# implementation stores the data in UTF-8, so approximatively 10000
# lines per megabyte at 100 chars per line, for pure ASCII text,
# unformatted text. A value of zero or less disables this feature.
# The maximum allowed size is 4GB.

# }}}

# URLS {{{

url_style single

# none, single, double, curly

# open_url_modifiers ctrl

# modifier keys to press when clicking with the mouse on URLs to open the URL
# none, mouse1, "" all seem to allow single-click URLs, but this cause "normal"
# clicks to be overridden

# open_url_with default
open_url_with xdg-open

# default: use the operating system's default URL handler. on linux this is...
# cat?

url_prefixes http https file ftp

detect_urls yes

# Detect URLs under the mouse. Detected URLs are highlighted with an underline
# and the mouse cursor becomes a hand over them. Even if this option is
# disabled, URLs are still clickable.

# }}}

# Clipboard, selection {{{

strip_trailing_spaces smart

# Remove spaces at the end of lines when copying to clipboard. A value of smart
# will do it when using normal selections, but not rectangle selections. always
# will always do it.

# rectangle_select_modifiers ctrl+alt

# The modifiers to use rectangular selection (i.e. to select text in
# a rectangular block with the mouse)

# terminal_select_modifiers shift

# The modifiers to override mouse selection even when a terminal
# application has grabbed the mouse

select_by_word_characters @-./_~?&=%+#

# Characters considered part of a word when double clicking. In
# addition to these characters any character that is marked as an
# alphanumeric character in the unicode database will be matched.

# }}}

# Window geometry, layout, margin {{{

remember_window_size  no
# irrelevant on tiling window managers (dwm)
# initial_window_width  640
# initial_window_height 400

# If enabled, the window size will be remembered so that new
# instances of kitty will have the same size as the previous
# instance. If disabled, the window will initially have size
# configured by initial_window_width/height, in pixels. You can use a
# suffix of "c" on the width/height values to have them interpreted
# as number of cells instead of pixels.

# enabled_layouts *
# https://sw.kovidgoyal.net/kitty/layouts/#the-tall-layout
enabled_layouts tall:bias=60;full_size=1;mirrored=false

# The enabled window layouts. A comma separated list of layout names.
# The special value all means all layouts. The first listed layout
# will be used as the startup layout. Default configuration is all
# layouts in alphabetical order. For a list of available layouts, see
# the https://sw.kovidgoyal.net/kitty/index.html#layouts.

window_resize_step_cells 2
window_resize_step_lines 2

# The step size (in units of cell width/cell height) to use when
# resizing windows. The cells value is used for horizontal resizing
# and the lines value for vertical resizing.

# window_border_width 0.5pt

# The width of window borders. Can be either in pixels (px) or pts
# (pt). Values in pts will be rounded to the nearest number of pixels
# based on screen resolution. If not specified the unit is assumed to
# be pts. Note that borders are displayed only when more than one
# window is visible. They are meant to separate multiple windows.

draw_minimal_borders no

# Draw only the minimum borders needed. This means that only the
# minimum needed borders for inactive windows are drawn. That is only
# the borders that separate the inactive window from a neighbor. Note
# that setting a non-zero window margin overrides this and causes all
# borders to be drawn.

window_margin_width 0

# The window margin (in pts) (blank area outside the border). A
# single value sets all four sides. Two values set the vertical and
# horizontal sides. Three values set top, horizontal and bottom. Four
# values set top, right, bottom and left.

single_window_margin_width -1

# The window margin (in pts) to use when only a single window is
# visible. Negative values will cause the value of
# window_margin_width to be used instead. A single value sets all
# four sides. Two values set the vertical and horizontal sides. Three
# values set top, horizontal and bottom. Four values set top, right,
# bottom and left.

window_padding_width 0

# The window padding (in pts) (blank area between the text and the
# window border). A single value sets all four sides. Two values set
# the vertical and horizontal sides. Three values set top, horizontal
# and bottom. Four values set top, right, bottom and left.

placement_strategy center

# When the window size is not an exact multiple of the cell size, the
# cell area of the terminal window will have some extra padding on
# the sides. You can control how that padding is distributed with
# this option. Using a value of center means the cell area will be
# placed centrally. A value of top-left means the padding will be on
# only the bottom and right edges.

hide_window_decorations yes

# Hide the window decorations (title-bar and window borders) with
# yes. On macOS, titlebar-only can be used to only hide the titlebar.
# Whether this works and exactly what effect it has depends on the
# window manager/operating system.

resize_debounce_time 0.1

# The time (in seconds) to wait before redrawing the screen when a
# resize event is received. On platforms such as macOS, where the
# operating system sends events corresponding to the start and end of
# a resize, this number is ignored.

# resize_draw_strategy static

# Choose how kitty draws a window while a resize is in progress. A
# value of static means draw the current window contents, mostly
# unchanged. A value of scale means draw the current window contents
# scaled. A value of blank means draw a blank window. A value of size
# means show the window size in cells.

resize_in_steps no

# Resize the OS window in steps as large as the cells, instead of
# with the usual pixel accuracy. Combined with an
# initial_window_width and initial_window_height in number of cells,
# this option can be used to keep the margins as small as possible
# when resizing the OS window. Note that this does not currently work
# on Wayland.

confirm_os_window_close 0

# Ask for confirmation when closing an OS window or a tab that has at
# least this number of kitty windows in it. A value of zero disables
# confirmation. This confirmation also applies to requests to quit
# the entire application (all OS windows, via the quit action).

# }}}

# Tab bar {{{

tab_bar_edge top

# Which edge to show the tab bar on, top or bottom

tab_bar_margin_width 0.0

# The margin to the left and right of the tab bar (in pts)

tab_bar_min_tabs 2

# The minimum number of tabs that must exist before the tab bar is
# shown

tab_switch_strategy previous

# The algorithm to use when switching to a tab when the current tab
# is closed. The default of previous will switch to the last used
# tab. A value of left will switch to the tab to the left of the
# closed tab. A value of right will switch to the tab to the right of
# the closed tab. A value of last will switch to the right-most tab.

tab_fade 0.25 0.5 0.75 1

# Control how each tab fades into the background when using fade for
# the tab_bar_style. Each number is an alpha (between zero and one)
# that controls how much the corresponding cell fades into the
# background, with zero being no fade and one being full fade. You
# can change the number of cells used by adding/removing entries to
# this list.

# active_tab_foreground   #000
# active_tab_background   #eee
# active_tab_font_style   bold-italic
# inactive_tab_foreground #444
# inactive_tab_background #999
# inactive_tab_font_style normal

# Tab bar colors and styles

tab_bar_background none

# Background color for the tab bar. Defaults to using the terminal
# background color.

# }}}

# Background, opacity, dimming {{{

background_image none
background_image_layout tiled
background_image_linear no

# incurs a significant performance cost
dynamic_background_opacity no

# active window must be opaque. for more consistent behaviour, I prefer to let
# picom handle transparency (particularly active/inactive windows).
background_opacity 1.0
background_tint 1.0
dim_opacity 1.0

# Fade -only- the text in inactive windows by the specified amount (a number
# between zero and one, with zero being fully faded). 0.8 is quite subtle,
# almost unnoticeable.
# nice to have, in conjunction with picom bg fading
inactive_text_alpha 0.8

# }}}

# Colors {{{

# https://sw.kovidgoyal.net/kitty/faq.html#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
# https://raw.githubusercontent.com/gruvbox-community/gruvbox-contrib/master/kitty/gruvbox-dark-hard.conf

# affects ls, grep, etc
# include $HOME/.local/share/nvim/lazy/citruszest.nvim/extra/kitty-theme.conf
include $HOME/.local/share/nvim/lazy/citruszest.nvim/extra/citruszest_kitty.conf

mark1_foreground black

# Color for marks of type 1

mark1_background #98d3cb

# Color for marks of type 1 (light steel blue)

mark2_foreground black

# Color for marks of type 2

mark2_background #f2dcd3

# Color for marks of type 1 (beige)

mark3_foreground black

# Color for marks of type 3

mark3_background #f274bc

# Color for marks of type 1 (violet)

active_border_color #00ff00

# The color for the border of the active window. Set this to none to
# not draw borders around the active window.

inactive_border_color #cccccc

# The color for the border of inactive windows

bell_border_color #ff5a00

# The color for the border of inactive windows in which a bell has
# occurred

# }}}

# Hinting {{{

# https://sw.kovidgoyal.net/kitty/kittens/hints.html
# https://sw.kovidgoyal.net/kitty/open_actions.html
# https://sw.kovidgoyal.net/kitty/kittens/hints.html#completely-customizing-the-matching-and-actions-of-the-kitten

# note: url != hyperlink
# map ctrl+g kitten hints --type url --program -
map ctrl+g kitten hints --type url --program xdg-open

# Use the hints kitten to select text and either pass it to an
# external program or insert it into the terminal or copy it to the
# clipboard.

map kitty_mod+e kitten hints

# Open a currently visible URL using the keyboard. The program used
# to open the URL is specified in open_url_with.

map kitty_mod+p>shift+f kitten hints --type path

# Select a path/filename and open it with the default open program.

map kitty_mod+p>l kitten hints --type line --program -

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1

map kitty_mod+p>w kitten hints --type word --program -

# Select words and insert into terminal.

map kitty_mod+p>h kitten hints --type hash --program -

# Select something that looks like a hash and insert it into the
# terminal. Useful with git, which uses sha1 hashes to identify
# commits

map kitty_mod+p>n kitten hints --type linenum

# Select something that looks like filename:linenum and open it in
# vim at the specified line number.

map kitty_mod+p>y kitten hints --type hyperlink

# Select a hyperlink (i.e. a URL that has been marked as such by the
# terminal program, for example, by ls --hyperlink=auto).

# The hints kitten has many more modes of operation that you can map
# to different shortcuts. For a full description see kittens/hints.
# }}}

# Keyboard shortcuts {{{

# For a list of key names, see: the GLFW key macros
# <https://github.com/kovidgoyal/kitty/blob/master/glfw/glfw3.h#L349>.
# The name to use is the part after the GLFW_KEY_ prefix. For a list
# of modifier names, see: GLFW mods
# <https://www.glfw.org/docs/latest/group__mods.html>

# On Linux you can also use XKB key names to bind keys that are not
# supported by GLFW. See XKB keys
# <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
# keysyms.h> for a list of key names. The name to use is the part
# after the XKB_KEY_ prefix. Note that you can only use an XKB key
# name for keys that are not known as GLFW keys.

# Finally, you can use raw system key codes to map keys, again only
# for keys that are not known as GLFW keys. To see the system key
# code for a key, start kitty with the kitty --debug-keyboard option.
# Then kitty will output some debug text for every key event. In that
# text look for ``native_code`` the value of that becomes the key
# name in the shortcut. For example:

# .. code-block:: none

#     on_key_input: glfw key: 65 native_code: 0x61 action: PRESS mods: 0x0 text: 'a'

# Here, the key name for the A key is 0x61 and you can use it with:

#     map ctrl+0x61 something

# to map ctrl+a to something.

# You can use the special action no_op to unmap a keyboard shortcut
# that is assigned in the default configuration:

#     map kitty_mod+space no_op

# You can combine multiple actions to be triggered by a single
# shortcut, using the syntax below:

#     map key combine <separator> action1 <separator> action2 <separator> action3 ...

# For example:

#     map kitty_mod+e combine : new_window : next_layout

# this will create a new window and switch to the next available
# layout

# You can use multi-key shortcuts using the syntax shown below:

#     map key1>key2>key3 action

# For example:

#     map ctrl+f>2 set_font_size 20

clear_all_shortcuts no

# You can have kitty remove all shortcut definition seen up to this
# point. Useful, for instance, to remove the default shortcuts.

# kitten_alias hints hints --hints-offset=0

# You can create aliases for kitten names, this allows overriding the
# defaults for kitten options and can also be used to shorten
# repeated mappings of the same kitten with a specific group of
# options. For example, the above alias changes the default value of
# kitty +kitten hints --hints-offset to zero for all mappings,
# including the builtin ones.

# Clipboard {{{

map kitty_mod+c copy_to_clipboard

# There is also a copy_or_interrupt action that can be optionally
# mapped to Ctrl+c. It will copy only if there is a selection and
# send an interrupt otherwise. Similarly, copy_and_clear_or_interrupt
# will copy and clear the selection or send an interrupt if there is
# no selection.

# map kitty_mod+o  pass_selection_to_program
# map kitty_mod+s  paste_from_selection
map kitty_mod+v  paste_from_clipboard
map shift+insert paste_from_selection

# You can also pass the contents of the current selection to any
# program using pass_selection_to_program. By default, the system's
# open program is used, but you can specify your own, the selection
# will be passed as a command line argument to the program, for
# example:

#     map kitty_mod+o pass_selection_to_program firefox

# You can pass the current selection to a terminal program running in
# a new kitty window, by using the @selection placeholder:

#     map kitty_mod+y new_window less @selection

# }}}

# Scrolling {{{

# open scrollback in less
map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

# map kitty_mod+down      scroll_line_down
# map kitty_mod+end       scroll_end
# map kitty_mod+home      scroll_home
# map kitty_mod+page_down scroll_page_down
# map kitty_mod+page_up   scroll_page_up
# map kitty_mod+up        scroll_line_up
# scroll_page_up won't work in vim

# You can pipe the contents of the current screen + history buffer as
# STDIN to an arbitrary program using the ``launch`` function. For
# example, the following opens the scrollback buffer in less in an
# overlay window:

#     map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R

# For more details on piping screen and buffer contents to external
# programs, see launch.

# }}}

# Window management {{{

# https://sw.kovidgoyal.net/kitty/launch/#options
# note: bashrc is only sourced if shell is invoked (i.e. no cmd is passed)
map kitty_mod+enter launch --cwd=current --type=os-window

# shadows ranger binding, which is probably a good thing
map ctrl+e launch --cwd=current --type=os-window

# dwm focus clearly supersedes kitty's, and i don't want my vim session to be
# disrupted, so i have to bite the bullet and use a kitty split.
map kitty_mod+x launch --keep-focus --cwd=current --type=window ~/.cargo/bin/funzzy

# You can open a new window running an arbitrary program, for
# example:

#     map kitty_mod+y      launch mutt

# You can open a new window with the current working directory set to
# the working directory of the current window using:

#     map ctrl+alt+enter    launch --cwd=current

# You can open a new window that is allowed to control kitty via the
# kitty remote control facility by prefixing the command line with @.
# Any programs running in that window will be allowed to control
# kitty. For example:

#     map ctrl+enter launch --allow-remote-control some_program

# You can open a new window next to the currently active window or as
# the first window, with:

#     map ctrl+n launch --location=neighbor some_program
#     map ctrl+f launch --location=first some_program

# For more details, see launch.

map kitty_mod+n new_os_window

# Works like new_window above, except that it opens a top level OS
# kitty window. In particular you can use new_os_window_with_cwd to
# open a window with the current working directory.

# map kitty_mod+w close_window
# map kitty_mod+f move_window_forward
# map kitty_mod+b move_window_backward
# map kitty_mod+` move_window_to_top
# map kitty_mod+r start_resizing_window

# map kitty_mod+0 tenth_window
# map kitty_mod+1 first_window
# map kitty_mod+2 second_window
# map kitty_mod+3 third_window
# map kitty_mod+4 fourth_window
# map kitty_mod+5 fifth_window
# map kitty_mod+6 sixth_window
# map kitty_mod+7 seventh_window
# map kitty_mod+8 eighth_window
# map kitty_mod+9 ninth_window

# }}}

# Tab management {{{

# map kitty_mod+alt+t set_tab_title
# map kitty_mod+j next_window
# map kitty_mod+k previous_window
# map kitty_mod+left  previous_tab
# map kitty_mod+q     close_tab
# map kitty_mod+right next_tab

# You can also create shortcuts to go to specific tabs, with 1 being
# the first tab, 2 the second tab and -1 being the previously active
# tab, and any number larger than the last tab being the last tab:

# map alt+1 goto_tab 1
# map alt+2 goto_tab 2

# Just as with new_window above, you can also pass the name of
# arbitrary commands to run when using new_tab and use
# new_tab_with_cwd. Finally, if you want the new tab to open next to
# the current tab rather than at the end of the tabs list, use:

#     map ctrl+t new_tab !neighbor [optional cmd to run]
# }}}

# Layout management {{{

# map alt+l next_layout

# You can also create shortcuts to switch to specific layouts:

#     map ctrl+alt+t goto_layout tall
#     map ctrl+alt+s goto_layout stack

# Similarly, to switch back to the previous layout:

#    map ctrl+alt+p last_used_layout
# }}}

# Font sizes {{{

# You can change the font size for all top-level kitty OS windows at
# a time or only the current one.

# To setup shortcuts for specific font sizes:

#     map kitty_mod+f6 change_font_size all 10.0

# To setup shortcuts to change only the current OS window's font
# size:

#     map kitty_mod+f6 change_font_size current 10.0
# }}}

# Miscellaneous {{{

# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+u      kitten unicode_input
map kitty_mod+escape kitty_shell window
map kitty_mod+f10    toggle_maximized
map kitty_mod+f2     edit_config_file

# Open the kitty shell in a new window/tab/overlay/os_window to
# control kitty using commands.

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default

# You can create shortcuts to clear/reset the terminal. For example:

# map kitty_mod+f10 clear_terminal clear active
# map kitty_mod+f11 clear_terminal scrollback active
# map kitty_mod+f12 clear_terminal scroll active
# map kitty_mod+f9 clear_terminal reset active

# If you want to operate on all windows instead of just the current
# one, use all instead of active.

# It is also possible to remap Ctrl+L to both scroll the current
# screen contents into the scrollback buffer and clear the screen,
# instead of just clearing the screen:
# map ctrl+backspace clear_terminal scroll active
# map ctrl+backspace clear_terminal scroll active
# map ctrl+backspace combine : clear_terminal scroll active : send_text normal,application \x0c

# You can tell kitty to send arbitrary (UTF-8) encoded text to the
# client program when pressing specified shortcut keys. For example:

#     map ctrl+alt+a send_text all Special text

# This will send "Special text" when you press the ctrl+alt+a key
# combination.  The text to be sent is a python string literal so you
# can use escapes like \x1b to send control codes or \u21fb to send
# unicode characters (or you can just input the unicode characters
# directly as UTF-8 text). The first argument to send_text is the
# keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated
# combination of them.  The special keyword all means all modes. The
# modes normal and application refer to the DECCKM cursor key mode
# for terminals, and kitty refers to the special kitty extended
# keyboard protocol.

# Another example, that outputs a word and then moves the cursor to
# the start of the line (same as pressing the Home key):

#     map ctrl+alt+a send_text normal Word\x1b[H
#     map ctrl+alt+a send_text application Word\x1bOH

# }}}

# }}}

# https://github.com/search?q=filename%3Akitty.conf+map+delete&type=Code
# https://github.com/alxshelepenok/dotfiles/blob/5cce394d138bed0954813aff75b8cbe787a1c678/dotfiles/.config/kitty/kitty.conf#L48

# map ctrl+x send_text all \x1b\x64
# map ctrl+x send_text all \x17
# map ctrl+x send_text all \x1bdei

# must not conflict with vim/inputrc binds!

# Advanced {{{

enable_audio_bell no
visual_bell_duration 0.0
window_alert_on_bell yes
bell_on_tab yes
command_on_bell none
repaint_delay 10
input_delay 3
sync_to_monitor yes
linux_display_server auto

# always use bash (not zsh)
shell bash

editor .
close_on_child_death yes
# "no" might be the cause of unkillable terminal windows

# Close the window when the child process (shell) exits. If no (the
# default), the terminal will remain open when the child exits as
# long as there are still processes outputting to the terminal (for
# example disowned or backgrounded processes). If yes, the window
# will close as soon as the child process exits. Note that setting it
# to yes means that any background processes still using the terminal
# can fail silently because their stdout/stderr/stdin no longer work.

allow_remote_control no

# Allow other programs to control kitty. If you turn this on other
# programs can control all aspects of kitty, including sending text
# to kitty windows, opening new windows, closing windows, reading the
# content of windows, etc.  Note that this even works over ssh
# connections. You can chose to either allow any program running
# within kitty to control it, with yes or only programs that connect
# to the socket specified with the kitty --listen-on command line
# option, if you use the value socket-only. The latter is useful if
# you want to prevent programs running on a remote computer over ssh
# from controlling kitty.

listen_on none
update_check_interval 0
startup_session none
clipboard_control write-clipboard write-primary

# Allow programs running in kitty to read and write from the
# clipboard. You can control exactly which actions are allowed. The
# set of possible actions is: write-clipboard read-clipboard write-
# primary read-primary. You can additionally specify no-append to
# disable kitty's protocol extension for clipboard concatenation. The
# default is to allow writing to the clipboard and primary selection
# with concatenation enabled. Note that enabling the read
# functionality is a security risk as it means that any program, even
# one running on a remote server via SSH can read your clipboard.

allow_hyperlinks yes
term xterm-kitty

# }}}

# https://jdhao.github.io/2020/05/05/kitty_config_mac/
macos_quit_when_last_window_closed yes

# env vars are a hacky way to set os-specific configs
# e.g. $COMMAND_MODE (unix2003) does not exist on linux
# also consider OSTYPE (though this is less robust due to version suffix)
include ${COMMAND_MODE}.conf
